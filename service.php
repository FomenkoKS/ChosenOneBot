<?php

class Service
{
    private $telegram;
    private $redis;
    private $chat_id;

    public function __construct($telegram)
    {
        $this->redis = new Redis();
        $this->redis->connect('127.0.0.1', 6379);

        $this->telegram = $telegram;
        $this->chat_id = (!is_null($telegram->Callback_Data())) ? $telegram->Callback_Query()['from']['id'] : $telegram->ChatID();
    }

    public function __deconstruct()
    {
        $this->redis->close();
    }

    public function setTokenMsg()
    {
        $this->redis->hSet('waitToken', $this->chat_id, 1);
        $this->telegram->sendMessage([
            'chat_id' => $this->chat_id,
            'text' => "*–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ç–æ–∫–µ–Ω.*\r\n\r\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É @BotFather –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/newbot`, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è –∏ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞. –í –æ—Ç–≤–µ—Ç BotFather –ø—Ä–∏—à–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞. –í—Å—Ç–∞–≤—å—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å—é–¥–∞.",
            'parse_mode' => 'Markdown'
        ]);

    }

    public function setChannelMsg()
    {
        $this->redis->hSet('waitChannel', $this->chat_id, 1);
        $this->telegram->sendMessage([
            'chat_id' => $this->chat_id,
            'text' => '–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞, –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É, –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /done.'
        ]);
    }

    public function genPost($chat, $token)
    {
        $buttons = [];
        if ($this->redis->sIsMember('campaigns', $token)) {
            $text = "–ö–∞–Ω–∞–ª—ã —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ: " . implode(', ', $this->getChannelList($token)) . ".\r\n–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.";
            if (($count = $this->redis->sCard('members:' . $token)) > 0) $text .= "\r\n\r\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>$count</b>";
            array_push($buttons, [[
                'text' => '–Ø —É—á–∞—Å—Ç–≤—É—é!',
                'callback_data' => 'accept:' . explode(':', $token)[0]
            ]]);
        } else {
            $text = '–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω.';
        }
        $settings = [
            'chat_id' => $chat,
            'text' => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode([
                'inline_keyboard' => $buttons
            ])
        ];


        return $settings;
    }

    public function genMenu()
    {
        $this->cancelWaiting();
        $token = $this->redis->hGet('tokens', $this->chat_id);
        $tg = new Telegram($token);

        $bot = $tg->getMe();
        $buttons = [[['callback_data' => 'setToken', 'text' => 'ü§ñ –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–æ–∫–µ–Ω']]];
        if (isset($bot['result']['username'])) {
            $text = "–ö —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –±–æ—Ç @" . $bot['result']['username'];
            array_push($buttons, [['callback_data' => 'setChannel', 'text' => '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª']]);

            if ($this->redis->sCard('channels:' . $token) > 0) {
                $text .= "\r\n\r\n<b>–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\r\n";
                $text .= implode("\r\n", $this->getChannelList($token));

                array_push($buttons, [['callback_data' => 'delChannel', 'text' => '‚ûñ –£–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª']]);
                if ($this->redis->sIsMember('campaigns', $token)) {
                    $text .= "\r\n\r\n<b>–ö–æ–Ω–∫—É—Ä—Å –Ω–∞—á–∞—Ç.</b>";
                }

                if (($count = $this->redis->sCard('members:' . $token)) > 0) {
                    $text .= "\r\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>$count</b>.\r\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö –æ–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –ª–∏—à—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å¬ª.";

                    array_push($buttons, [['callback_data' => 'getWinner', 'text' => 'üèÜ –í—ã—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è']]);
                } else {
                    if ($this->redis->sIsMember('campaigns', $token)) {
                        $text .= "\r\n<b>–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∞ —Ç–∞–∫–∂–µ –≤—ã—è–≤–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é¬ª.</b>";
                        array_push($buttons, [['callback_data' => 'refresh', 'text' => 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é']]);
                    } else {
                        array_push($buttons, [['callback_data' => 'startCampaign', 'text' => 'üèÅ –ù–∞—á–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à']]);
                    }
                }

                if (($count = $this->redis->sCard('winners:' . $token)) > 0) {
                    $text .= "\r\n\r\n–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: <b>$count</b>.";
                    array_push($buttons, [['callback_data' => 'endCampaign', 'text' => '‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à']]);
                }
            }

        } else $text = "<b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ç–æ–∫–µ–Ω.</b>\r\n\r\n–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–æ–∫–µ–Ω –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /setToken –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.";
        $settings = [
            'chat_id' => $this->chat_id,
            'text' => $text,
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode([
                'inline_keyboard' => $buttons
            ])
        ];
        return $settings;
    }


    public function cancelWaiting()
    {
        $this->redis->hSet('waitToken', $this->chat_id, 0);
        $this->redis->hSet('waitChannel', $this->chat_id, 0);
    }

    public function botIsAdmin($chat, $owner)
    {
        $token = $this->redis->hGet('tokens', $owner);
        $tg = new Telegram($token);
        $admins = $tg->getChatAdministrators(['chat_id' => $chat]);
        $flag = 0;
        foreach ($admins['result'] as $admin) {
            if ($admin['user']['id'] == explode(':', $token)[0] || $admin['user']['id'] == $owner)
                if ($admin['can_post_messages'] == 1 || $admin['status'] == 'creator') $flag += 1;
        }
        return ($flag > 1) ? true : false;
    }

    public function conditionsComplied(){
        return true;
    }

    public function debug($array)
    {
        $this->telegram->sendMessage([
            'chat_id' => 32512143,
            'text' => print_r($array, true)
        ]);
    }

    public function getChatId($chat)
    {
        $token = $this->redis->hGet('tokens', $this->chat_id);
        $tg = new Telegram($token);
        return $tg->getChat(['chat_id' => $chat])['result']['id'];
    }

    public function getChannelList($token)
    {
        $a = [];
        $tg = new Telegram($token);
        foreach ($this->redis->sMembers('channels:' . $token) as $i) if ($this->botIsAdmin($i, $this->chat_id)) {
            $chat = $tg->getChat(['chat_id' => $i])['result'];
            $title = (!isset($chat['username'])) ? $chat['title'] : "<a href='t.me/" . $chat['username'] . "'>" . $chat['title'] . "</a>";
            array_push($a, $title);
        }
        return $a;
    }
}

?>